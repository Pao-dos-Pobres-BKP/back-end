generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  role      UserRole
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  donor Donor?
  admin Admin?

  @@map("users")
}

model Donor {
  id        String   @id @default(cuid())
  fullName  String   @map("full_name")
  birthDate DateTime @map("birth_date") @db.Date
  gender    Gender
  phone     String
  cpf       String   @unique

  campaign Campaign[]
  donation Donation[]
  address  Address[]

  user User @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("donors")
}

model Admin {
  id   String  @id @default(cuid())
  root Boolean @default(false)

  campaign Campaign[]

  user User @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Address {
  id         String  @id @default(cuid())
  state      String  @db.Char(2)
  city       String
  district   String
  street     String
  number     String
  postalCode String  @map("postal_code")
  complement String?
  donorId    String  @map("donor_id")

  donor Donor @relation(fields: [donorId], references: [id])

  @@map("addresses")
}

model Campaign {
  id            String         @id @default(cuid())
  description   String
  targetAmount  Decimal        @map("target_amount") @db.Decimal(12, 2)
  currentAmount Decimal        @map("current_amount") @db.Decimal(12, 2)
  startDate     DateTime?      @map("start_date") @db.Date
  endDate       DateTime?      @map("end_date") @db.Date
  imageUrl      String?        @map("image_url")
  status        CampaignStatus @default(PENDING)
  donorId       String?        @map("donor_id")
  adminId       String         @map("admin_id")

  donation Donation[]

  admin Admin  @relation(fields: [adminId], references: [id])
  donor Donor? @relation(fields: [donorId], references: [id])

  @@map("campaigns")
}

model Donation {
  id          String   @id @default(cuid())
  amount      Decimal  @db.Decimal(12, 2)
  periodicity Periodicity?
  donorId     String?   @map("donor_id")
  campaignId  String?  @map("campaign_id")
  createdAt   DateTime @default(now()) @map("created_at")

  payment Payment[]

  campaign Campaign? @relation(fields: [campaignId], references: [id])
  donor    Donor?     @relation(fields: [donorId], references: [id])

  @@map("donations")
}

model Payment {
  id            String        @id @default(cuid())
  paymentMethod PaymentMethod @map("payment_method")
  status        PaymentStatus @default(PENDING)
  amount        Decimal?      @db.Decimal(12, 2)
  paidAt        DateTime?     @map("paid_at")
  donationId    String        @map("donation_id")

  donation Donation @relation(fields: [donationId], references: [id])

  @@map("payments")
}

model News {
  id          String    @id @default(cuid())
  title       String
  description String
  date        DateTime? @db.Date
  location    String?
  url         String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("news")
}

enum UserRole {
  ADMIN
  DONOR
}

enum CampaignStatus {
  PENDING
  ACTIVE
  PAUSED
  FINISHED
  CANCELED
}

enum PaymentMethod {
  PIX
  BANK_SLIP
  CREDIT_CARD
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CONFIRMED
  FAILED
  REFUNDED
  CANCELED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Periodicity {
  MONTHLY
  QUARTERLY
  SEMI_ANNUAL
  YEARLY
}