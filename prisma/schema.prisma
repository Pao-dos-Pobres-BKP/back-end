generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String
  admin    Admin?
  donor    Donor?
}

model Donor {
  id        String     @id @default(cuid())
  fullName  String
  birthDate DateTime   @db.Date
  gender    Gender
  phone     String?
  campaign  Campaign[]
  donation  Donation[]
  createdAt DateTime   @default(now())
  deletedAt DateTime?
  user      User       @relation(fields: [id], references: [id])
  address   Address[]
}

model Admin {
  id        String     @id @default(cuid())
  root      Boolean    @default(false)
  user      User       @relation(fields: [id], references: [id])
  createdAt DateTime   @default(now())
  deletedAt DateTime?
  campaign  Campaign[]
}

model Address {
  id         String  @id @default(cuid())
  state      String  @db.Char(2)
  city       String
  district   String
  street     String
  number     String
  postalCode String
  complement String?
  donorId    String
  donor      Donor   @relation(fields: [donorId], references: [id])
}

model Campaign {
  id           String         @id @default(cuid())
  description  String
  targetAmount Decimal        @db.Decimal(12, 2)
  startDate    DateTime?      @db.Date
  endDate      DateTime?      @db.Date
  imageUrl     String?
  status       CampaignStatus @default(PENDING)
  adminId      String
  admin        Admin          @relation(fields: [id], references: [id])
  donation Donation[]
  donor    Donor?     @relation(fields: [donorId], references: [id])
  donorId  String?
}

model Donation {
  id          String    @id @default(cuid())
  amount      Decimal   @db.Decimal(12, 2)
  periodicity String?
  impactArea  String?
  donorId     String
  campaignId  String?
  createdAt   DateTime  @default(now())
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  donor       Donor     @relation(fields: [donorId], references: [id])
  payment     Payment[]
}

model Payment {
  id            String        @id @default(cuid())
  PaymentMethod PaymentMethod
  status        PaymentStatus @default(PENDING)
  amount        Decimal?      @db.Decimal(12, 2)
  paidAt        DateTime?
  donationId    String
  donation      Donation      @relation(fields: [donationId], references: [id])
}

model News {
  id          String    @id @default(cuid())
  title       String
  description String
  date        DateTime? @db.Date
  location    String?
  url         String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

enum CampaignStatus {
  PENDING
  ACTIVE
  PAUSED
  FINISHED
  CANCELED
}

enum PaymentMethod {
  PIX
  BANK_SLIP
  CREDIT_CARD
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CONFIRMED
  FAILED
  REFUNDED
  CANCELED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
